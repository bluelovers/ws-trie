{"version":3,"file":"checkPrefix.js","sourceRoot":"","sources":["checkPrefix.ts"],"names":[],"mappings":";;AACA,mCAAuC;AAEvC,SAAgB,WAAW,CAAI,UAAoB,EAAE,MAAc;IAElE,4CAA4C;IAC5C,MAAM,KAAK,GAAG,aAAK,CAAC,MAAM,CAAC,CAAC;IAC5B,MAAM,WAAW,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,KAAK,EAAW,EAAE;QAE1D,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,EACvB;YACC,OAAO,KAAK,CAAC;SACb;QAED,aAAa;QACb,OAAO,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,OAAO;QACN,WAAW;QACX,UAAU;KAIV,CAAA;AACF,CAAC;AAtBD,kCAsBC;AAED,kBAAe,WAAW,CAAA","sourcesContent":["import { ITrie, ITrieNode } from './create';\nimport utils, { split } from './utils';\n\nexport function checkPrefix<T>(prefixNode: ITrie<T>, prefix: string)\n{\n\t//const input = split(prefix.toLowerCase());\n\tconst input = split(prefix);\n\tconst prefixFound = input.every((letter, index): boolean =>\n\t{\n\t\tif (!prefixNode[letter])\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t// @ts-ignore\n\t\treturn prefixNode = prefixNode[letter];\n\t});\n\n\treturn {\n\t\tprefixFound,\n\t\tprefixNode,\n\t} as {\n\t\tprefixFound: boolean;\n\t\tprefixNode: ITrieNode<T>;\n\t}\n}\n\nexport default checkPrefix\n"]}