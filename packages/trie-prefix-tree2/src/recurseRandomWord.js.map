{"version":3,"file":"recurseRandomWord.js","sourceRoot":"","sources":["recurseRandomWord.ts"],"names":[],"mappings":";;AAAA,qCAA8B;AAG9B,SAAgB,iBAAiB,CAAI,IAAc,EAAE,MAAc;IAElE,MAAM,IAAI,GAAG,MAAM,CAAC;IAEpB,MAAM,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnC,MAAM,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;IACrE,IAAI,MAAM,KAAK,gBAAM,CAAC,QAAQ,EAC9B;QACC,OAAO,IAAI,CAAC;KACZ;IACD,OAAO,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,MAAM,GAAG,MAAM,CAAC,CAAC;AACzD,CAAC;AAXD,8CAWC;AAED,kBAAe,iBAAiB,CAAA","sourcesContent":["import config from './config';\nimport { ITrieRaw, ITrieNode, ITrie } from './create';\n\nexport function recurseRandomWord<T>(node: ITrie<T>, prefix: string): string\n{\n\tconst word = prefix;\n\n\tconst branches = Object.keys(node);\n\tconst branch = branches[Math.floor(Math.random() * branches.length)];\n\tif (branch === config.END_WORD)\n\t{\n\t\treturn word;\n\t}\n\treturn recurseRandomWord(node[branch], prefix + branch);\n}\n\nexport default recurseRandomWord\n"]}