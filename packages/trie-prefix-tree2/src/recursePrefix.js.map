{"version":3,"file":"recursePrefix.js","sourceRoot":"","sources":["recursePrefix.ts"],"names":[],"mappings":";;AAAA,qCAA4C;AAG5C,oCAAoC;AACpC,oCAAoC;AACpC,SAAgB,WAAW,CAAI,IAAO,EAAE,QAAa;IAEpD,IAAI,CAAC,GAAG,CAAC,CAAC;IAEV,OAAO,CAAC,GAAG,QAAQ,CAAC,MAAM,EAC1B;QACC,IAAI,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC,EACtB;YACC,MAAM;SACN;QACD,CAAC,IAAI,CAAC,CAAC;KACP;IAED,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;IAE5B,OAAO,QAAQ,CAAC;AACjB,CAAC;AAhBD,kCAgBC;AAED,SAAgB,aAAa,CAAI,IAAc,EAAE,MAAc,EAAE,MAAe,EAAE,WAAqB,EAAE;IAExG,IAAI,IAAI,GAAG,MAAM,CAAC;IAElB,KAAK,MAAM,MAAM,IAAI,IAAI,EACzB;QACC,aAAa;QACb,IAAI,MAAM,KAAK,iBAAQ,EACvB;YACC,IAAI,MAAM,EACV;gBACC,WAAW,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;aAC5B;iBAED;gBACC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACpB;YACD,IAAI,GAAG,EAAE,CAAC;SACV;QACD,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,MAAM,GAAG,MAAM,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;KAC/D;IAED,OAAO,QAAQ,CAAC;AACjB,CAAC;AAvBD,sCAuBC;AAED,kBAAe,aAAa,CAAA","sourcesContent":["import config, { END_WORD } from './config';\nimport { ITrie, ITrieNode, ITrieRaw } from './create';\n\n// sort items as they're being found\n// to prevent slow .sort() in NodeJs\nexport function pushInOrder<T>(word: T, prefixes: T[])\n{\n\tlet i = 0;\n\n\twhile (i < prefixes.length)\n\t{\n\t\tif (word < prefixes[i])\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\ti += 1;\n\t}\n\n\tprefixes.splice(i, 0, word);\n\n\treturn prefixes;\n}\n\nexport function recursePrefix<T>(node: ITrie<T>, prefix: string, sorted: boolean, prefixes: string[] = []): string[]\n{\n\tlet word = prefix;\n\n\tfor (const branch in node)\n\t{\n\t\t// @ts-ignore\n\t\tif (branch === END_WORD)\n\t\t{\n\t\t\tif (sorted)\n\t\t\t{\n\t\t\t\tpushInOrder(word, prefixes);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tprefixes.push(word);\n\t\t\t}\n\t\t\tword = '';\n\t\t}\n\t\trecursePrefix(node[branch], prefix + branch, sorted, prefixes);\n\t}\n\n\treturn prefixes;\n}\n\nexport default recursePrefix\n"]}