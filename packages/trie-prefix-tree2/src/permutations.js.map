{"version":3,"file":"permutations.js","sourceRoot":"","sources":["permutations.ts"],"names":[],"mappings":";;AACA,mCAAsC;AAEtC,SAAgB,YAAY,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,GAAG;IAClD,IAAI,EAAE,SAAS;CACf;IAEA,IAAI,OAAO,OAAO,KAAK,QAAQ,EAC/B;QACC,MAAK,CAAC,iDAAiD,OAAO,OAAO,EAAE,CAAC,CAAC;KACzE;IAED,IAAI,KAAK,GAAG,EAAE,CAAC;IAEf,MAAM,OAAO,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,GAAG,EAAE,EAAE,EAAE;QAE3C,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC;QACtC,MAAM,SAAS,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QACzC,mDAAmD;QACnD,MAAM,YAAY,GAAG,mBAAW,CAAC,IAAI,CAAC,CAAC;QAEvC,IAAI,WAAW,IAAI,YAAY,IAAI,CAAC,SAAS,EAC7C;YACC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACnB;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAC/C;YACC,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YAEvB,IAAI,IAAI,CAAC,IAAI,KAAK,aAAa,EAC/B;gBACC,IAAI,YAAY,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAC3C;oBACC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;iBACnB;aACD;YAED,IAAI,IAAI,CAAC,MAAM,CAAC,EAChB;gBACC,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;gBACpE,aAAa;gBACb,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,MAAM,GAAG,MAAM,EAAE,KAAK,CAAC,CAAC;aACzD;SACD;QAED,OAAO,KAAK,CAAC,IAAI,EAAE,CAAC;IACrB,CAAC,CAAC;IAEF,OAAO,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AAC/B,CAAC;AA/CD,oCA+CC;AAED,kBAAe,YAAY,CAAA","sourcesContent":["import config from './config';\nimport { hasEndpoint } from './utils';\n\nexport function permutations(letters, trie, opts = {\n\ttype: 'anagram',\n}): string[]\n{\n\tif (typeof letters !== 'string')\n\t{\n\t\tthrow(`Permutations expects string letters, received ${typeof letters}`);\n\t}\n\n\tlet words = [];\n\n\tconst permute = (word, node, prefix = '') =>\n\t{\n\t\tconst wordIsEmpty = word.length === 0;\n\t\tconst wordFound = words.includes(prefix);\n\t\t//const endWordFound = node[config.END_WORD] === 1;\n\t\tconst endWordFound = hasEndpoint(node);\n\n\t\tif (wordIsEmpty && endWordFound && !wordFound)\n\t\t{\n\t\t\twords.push(prefix);\n\t\t}\n\n\t\tfor (let i = 0, len = word.length; i < len; i++)\n\t\t{\n\t\t\tconst letter = word[i];\n\n\t\t\tif (opts.type === 'sub-anagram')\n\t\t\t{\n\t\t\t\tif (endWordFound && !words.includes(prefix))\n\t\t\t\t{\n\t\t\t\t\twords.push(prefix);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (node[letter])\n\t\t\t{\n\t\t\t\tconst remaining = word.substring(0, i) + word.substring(i + 1, len);\n\t\t\t\t// @ts-ignore\n\t\t\t\tpermute(remaining, node[letter], prefix + letter, words);\n\t\t\t}\n\t\t}\n\n\t\treturn words.sort();\n\t};\n\n\treturn permute(letters, trie);\n}\n\nexport default permutations\n"]}