{"version":3,"file":"create.js","sourceRoot":"","sources":["create.ts"],"names":[],"mappings":";;AAAA,qCAA8B;AAC9B,qCAAwD;AAExD,mCAAgC;AAyBhC,SAAgB,MAAM,CAAI,KAAgB,EAAE,GAAG,IAAI;IAElD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EACzB;QACC,MAAK,CAAC,sCAAsC,OAAO,KAAK,EAAE,CAAC,CAAC;KAC5D;IAED,MAAM,IAAI,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,IAAI,EAAE,EAAE;QAE/C,2BAA2B;QAC3B,aAAK,CAAC,IAAI,CAAC;aACT,MAAM,CAAC,gBAAM,EAAE,WAAW,CAAC,CAC5B;QAED,OAAO,WAAW,CAAC;IACpB,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,IAAI,CAAC;AACb,CAAC;AAlBD,wBAkBC;AAED,kBAAe,MAAM,CAAA","sourcesContent":["import append from './append';\nimport { END_WORD, END_VALUE, END_DEF } from './config';\nimport { IInput, IInputMap } from './index';\nimport { split } from './utils';\n\nexport type ITrie<T = typeof END_VALUE> = ITrieNode<T> | ITrieRaw<T>;\n\nexport interface ITrieNode<T = typeof END_VALUE>\n{\n\t[k: string]: ITrieNode<T>,\n\n\t//@ts-ignore\n\t'$$'?: ITrieNodeValue<T>,\n\t//@ts-ignore\n\t[END_WORD]?: ITrieNodeValue<T>,\n}\n\nexport interface ITrieNodeValue<T = typeof END_VALUE>\n{\n\t[k: string]: T,\n\t[END_DEF]: string,\n}\n\nexport interface ITrieRaw<T = typeof END_VALUE>\n{\n\t[k: string]: ITrieNode<T>\n}\n\nexport function create<T>(input: IInput<T>, ...argv): ITrieRaw<T>\n{\n\tif (!Array.isArray(input))\n\t{\n\t\tthrow(`Expected parameter Array, received ${typeof input}`);\n\t}\n\n\tconst trie = input.reduce((accumulator, item) =>\n\t{\n\t\t//split(item.toLowerCase())\n\t\tsplit(item)\n\t\t\t.reduce(append, accumulator)\n\t\t;\n\n\t\treturn accumulator;\n\t}, {});\n\n\treturn trie;\n}\n\nexport default create\n"]}